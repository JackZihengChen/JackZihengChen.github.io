
<!DOCTYPE html>
<meta charset="utf-8">
<style>

.link {
  stroke: #A5A8AA;
}

.node text {
  pointer-events: none;
  font: 8px Helvetica, sans-serif;
}

</style>
<body>
    <a href="BarChart.htm">Bar Chart</a><br>
    <a href="Stationary.htm">Stationary Graph</a><br>
    <a href="Curved.htm">Curved Graph</a><br>
    <a href="NetworkChart.htm">Network Chart</a><br>
    <a href="https://bl.ocks.org/mbostock/950642">Reference</a><br>
<script src="//d3js.org/d3.v3.min.js"></script>
<script>

var width = 1000,
    height = 600

var svg = d3.select("body").append("svg")
    .attr("width", width)
    .attr("height", height);

var force = d3.layout.force()
    .gravity(0.05)
    .distance(100)
    .charge(-100)
    .size([width, height]);

svg.append("defs").append("marker")
    .attr("id", "arrow")
    .attr("viewBox", "0 -5 10 10")
    .attr("refX", 20)
    .attr("refY", 0)
    .attr("markerWidth", 5)
    .attr("markerHeight", 5)
    .attr("orient", "auto")
    .append("svg:path")
    .attr("d", "M0,-5L10,0L0,5");


d3.json("graph.json", function(error, json) {
    if (error) throw error;

    force
        .nodes(json.nodes)
        .links(json.links)
        .start();

    var link = svg.selectAll(".link")
        .data(json.links)
        .enter().append("line")
        .attr("class", "link")
        .attr("marker-end", "url(#arrow)");

      

    var node = svg.selectAll(".node")
        .data(json.nodes)
        .enter()
        .append("g")
        .attr("class", "node")
        
        .call(force.drag);

    node.append("circle")
        .attr("r", function(d, i){
            if(d.isRoot){
                return 10;
            }
            return 5;
        })
        // .attr("r", 5)
        .style("fill", function(d, i){
            if(d.abnormal){
                return "#E84A27";  
            }
            else{
                return "#13294b";
        }
        })
        .attr("x", -8)
        .attr("y", -8)
        .attr("width", 16)
        .attr("height", 16);

    node.append("text")
        .attr("dx", function(d, i){
            if(d.abnormal){
                return 10;  
            }
            else if(d.isRoot){
                return 10;  
            }
            else{
                return 5;
            }
        })
        .attr("dy", ".35em")
        .text(function(d) { return d.name });

    force.on("tick", function() {
        link.attr("x1", function(d) { return d.source.x; })
            .attr("y1", function(d) { return d.source.y; })
            .attr("x2", function(d) { return d.target.x; })
            .attr("y2", function(d) { return d.target.y; });

        node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
    });
});

</script>