
<!DOCTYPE html>
<meta charset="utf-8">
<input type="range" id="range" step="5" value="50" min="5" max="100">
<span id="label"></span>
<div id="chart"></div>

<script src="https://d3js.org/d3.v3.min.js" charset="utf-8"></script>
<script src="https://code.jquery.com/jquery-2.2.4.min.js"></script>


<style>

path.link {
  fill: none;
  stroke: #666;
  stroke-width: 1.5px;
}

.link {
  stroke: #A5A8AA;
}

.node text {
  pointer-events: none;
  font: 8px Helvetica, sans-serif;
}

marker#licensing {
  fill: green;
}

path.link.licensing {
  stroke: green;
}

path.link.resolved {
  stroke-dasharray: 0, 2 1;
}

circle {
  fill: #ccc;
  stroke: #333;
  stroke-width: 1.5px;
}

</style>
<body>
    <a href="BarChart.htm">Bar Chart</a><br>
    <a href="StationaryGraph.htm">Stationary Graph</a><br>
    <a href="https://jsfiddle.net/a5ua66zy/2/">Reference</a><br>
<script src="//d3js.org/d3.v3.min.js"></script>
<script>

function draw(linkDistance) {

var links = [{
  source: "Microsoft",
  target: "Amazon",
  type: "licensing"
}, {
  source: "Microsoft",
  target: "Amazon",
  type: "suit"
}, {
  source: "Amazon",
  target: "Microsoft",
  type: "resolved"
}];

//sort links by source, then target
links.sort(function(a, b) {
  if (a.source > b.source) {
    return 1;
  } else if (a.source < b.source) {
    return -1;
  } else {
    if (a.target > b.target) {
      return 1;
    }
    if (a.target < b.target) {
      return -1;
    } else {
      return 0;
    }
  }
});

//any links with duplicate source and target get an incremented 'linknum'
for (var i = 0; i < links.length; i++) {
  if (i != 0 &&
    links[i].source == links[i - 1].source &&
    links[i].target == links[i - 1].target) {
    links[i].linknum = links[i - 1].linknum + 1;
  } else {
    links[i].linknum = 1;
  };
};

var nodes = {};

// Compute the distinct nodes from the links.
links.forEach(function(link) {
  link.source = nodes[link.source] || (nodes[link.source] = {
    name: link.source
  });
  link.target = nodes[link.target] || (nodes[link.target] = {
    name: link.target
  });
});

var width = 1000,
    height = 600

var force = d3.layout.force()
  .nodes(d3.values(nodes))
  .links(links)
  .size([width, height])
  .linkDistance(linkDistance)
  .charge(-300)
  .on("tick", tick)
  .start();

var svg = d3.select("#chart").append("svg:svg")
  .attr("width", width)
  .attr("height", height);

// Per-type markers, as they don't inherit styles.
svg.append("svg:defs").selectAll("marker")
  .data(["suit", "licensing", "resolved"])
  .enter().append("svg:marker")
  .attr("id", String)
  .attr("viewBox", "0 -5 10 10")
  .attr("refX", 15)
  .attr("refY", -1.5)
  .attr("markerWidth", 6)
  .attr("markerHeight", 6)
  .attr("orient", "auto")
  .append("svg:path")
  .attr("d", "M0,-5L10,0L0,5");

var path = svg.append("svg:g").selectAll("path")
  .data(force.links())
  .enter().append("svg:path")
  .attr("class", function(d) {
    return "link " + d.type;
  })
  .attr("marker-end", function(d) {
    return "url(#" + d.type + ")";
  });

var circle = svg.append("svg:g").selectAll("circle")
  .data(force.nodes())
  .enter().append("svg:circle")
  .attr("r", 6)
  .call(force.drag);

var text = svg.append("svg:g").selectAll("g")
  .data(force.nodes())
  .enter().append("svg:g");

text.append("svg:text")
  .attr("x", 8)
  .attr("y", ".31em")
  .text(function(d) {
    return d.name;
  });

// Use elliptical arc path segments to doubly-encode directionality.
function tick() {
  path.attr("d", function(d) {
    var dx = d.target.x - d.source.x,
      dy = d.target.y - d.source.y;
    var qx = dy / 1 * d.linknum, //linknum is defined above
      qy = -dx / 1 * d.linknum;
    var qx1 = (d.source.x + (dx / 2)) + qx,
      qy1 = (d.source.y + (dy / 2)) + qy;
    return "M" + d.source.x + " " + d.source.y + " C" + d.source.x + " " + d.source.y + " " + qx1 + " " + qy1 + " " + d.target.x + " " + d.target.y;
  });

  circle.attr("transform", function(d) {
    return "translate(" + d.x + "," + d.y + ")";
  });

  text.attr("transform", function(d) {
    return "translate(" + d.x + "," + d.y + ")";
  });
}
}



window.onload = function() {
document.getElementById("range").addEventListener("input", function(e) {
  var value = this.value;

  document.getElementById("chart").innerHTML = "";
  document.getElementById("label").innerHTML = value;
  draw(value);
})

}


draw(70);
</script>